version: '3.8'

services:
  # Frontend production server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-https://api.yourapp.com/api}
        - VITE_WS_URL=${VITE_WS_URL:-wss://api.yourapp.com}
        - VITE_NODE_ENV=production
        - VITE_APP_NAME=ConvoChat
    container_name: convo-frontend-prod
    ports:
      - "80:8080"
    restart: unless-stopped
    networks:
      - convo-network
    healthcheck:
      test: ["/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:rw,noexec,nosuid,size=50m
      - /var/run:rw,noexec,nosuid,size=50m
      - /tmp:rw,noexec,nosuid,size=50m

  # Reverse proxy with SSL termination
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: convo-nginx-proxy
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./docker/nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
    networks:
      - convo-network
    restart: unless-stopped
    profiles:
      - with-ssl

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: convo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - convo-network
    restart: unless-stopped
    profiles:
      - with-monitoring

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: convo-loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/data/loki
    networks:
      - convo-network
    restart: unless-stopped
    profiles:
      - with-monitoring

volumes:
  prometheus_data:
    driver: local
  loki_data:
    driver: local

networks:
  convo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16