name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '20'

jobs:
  # =====================================
  # PR Quality Checks
  # =====================================
  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for diff analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run linting on changed files
        run: |
          # Get changed TypeScript/JavaScript files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E '\.(ts|tsx|js|jsx)$' || true)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Linting changed files: $CHANGED_FILES"
            npx eslint $CHANGED_FILES
          else
            echo "No TypeScript/JavaScript files changed"
          fi

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:run

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3000/api
          VITE_WS_URL: http://localhost:3000

      - name: Check bundle size impact
        run: |
          npm run analyze
          echo "Bundle size analysis completed"
          # You can add bundle size comparison logic here

      - name: Comment PR with build info
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read bundle analysis if it exists
            let bundleInfo = '';
            try {
              if (fs.existsSync('dist/bundle-analysis.html')) {
                bundleInfo = '\n\nüì¶ Bundle analysis generated and available in artifacts.';
              }
            } catch (err) {
              bundleInfo = '\n\n‚ö†Ô∏è Bundle analysis failed to generate.';
            }
            
            const comment = `
            ## üöÄ Build Summary for PR
            
            ‚úÖ **TypeScript compilation**: Passed
            ‚úÖ **Linting**: Passed  
            ‚úÖ **Tests**: Passed
            ‚úÖ **Build**: Passed
            ${bundleInfo}
            
            ---
            *This comment is automatically generated by the CI pipeline.*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # =====================================
  # Accessibility Tests
  # =====================================
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3000/api
          VITE_WS_URL: http://localhost:3000

      - name: Serve app and run accessibility tests
        run: |
          # Start the app in background
          npx serve -s dist -l 3000 &
          SERVER_PID=$!
          
          # Wait for server to be ready
          sleep 5
          
          # Run accessibility tests (you can add axe-core or similar)
          echo "Running accessibility tests..."
          # npx @axe-core/cli http://localhost:3000
          
          # Cleanup
          kill $SERVER_PID

  # =====================================
  # Visual Regression Tests (Optional)
  # =====================================
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'visual-tests')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3000/api
          VITE_WS_URL: http://localhost:3000

      - name: Run visual regression tests
        run: |
          echo "Visual regression tests would run here"
          # Add your visual testing tool here (Playwright, Chromatic, etc.)
          # npx playwright test --project=visual-tests